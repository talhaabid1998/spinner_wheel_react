{
  "version": 3,
  "sources": ["../../react-wheel-of-prizes/src/index.js"],
  "sourcesContent": ["import React, { useEffect, useState, useRef } from 'react'\n\nconst WheelComponent = ({\n  segments,\n  segColors,\n  winningSegment,\n  onFinished,\n  primaryColor = 'black',\n  contrastColor = 'white',\n  buttonText = 'Spin',\n  isOnlyOnce = true,\n  size = 290,\n  upDuration = 100,\n  downDuration = 1000,\n  fontFamily = 'proxima-nova'\n}) => {\n  let currentSegment = ''\n  let isStarted = false\n  const [isFinished, setFinished] = useState(false)\n  let timerHandle = 0\n  const timerDelay = segments.length\n  let angleCurrent = 0\n  let angleDelta = 0\n  let canvasContext = null\n  let maxSpeed = Math.PI / `${segments.length}`\n  const upTime = segments.length * upDuration\n  const downTime = segments.length * downDuration\n  let spinStart = 0\n  let frames = 0\n  const centerX = 300\n  const centerY = 300\n  useEffect(() => {\n    wheelInit()\n    setTimeout(() => {\n      window.scrollTo(0, 1)\n    }, 0)\n  }, [])\n  const wheelInit = () => {\n    initCanvas()\n    wheelDraw()\n  }\n\n  const initCanvas = () => {\n    let canvas = document.getElementById('canvas')\n    console.log(navigator)\n    if (navigator.userAgent.indexOf('MSIE') !== -1) {\n      canvas = document.createElement('canvas')\n      canvas.setAttribute('width', 1000)\n      canvas.setAttribute('height', 600)\n      canvas.setAttribute('id', 'canvas')\n      document.getElementById('wheel').appendChild(canvas)\n    }\n    canvas.addEventListener('click', spin, false)\n    canvasContext = canvas.getContext('2d')\n  }\n  const spin = () => {\n    isStarted = true\n    if (timerHandle === 0) {\n      spinStart = new Date().getTime()\n      // maxSpeed = Math.PI / ((segments.length*2) + Math.random())\n      maxSpeed = Math.PI / segments.length\n      frames = 0\n      timerHandle = setInterval(onTimerTick, timerDelay)\n    }\n  }\n  const onTimerTick = () => {\n    frames++\n    draw()\n    const duration = new Date().getTime() - spinStart\n    let progress = 0\n    let finished = false\n    if (duration < upTime) {\n      progress = duration / upTime\n      angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2)\n    } else {\n      if (winningSegment) {\n        if (currentSegment === winningSegment && frames > segments.length) {\n          progress = duration / upTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n          progress = 1\n        } else {\n          progress = duration / downTime\n          angleDelta =\n            maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n        }\n      } else {\n        progress = duration / downTime\n        angleDelta = maxSpeed * Math.sin((progress * Math.PI) / 2 + Math.PI / 2)\n      }\n      if (progress >= 1) finished = true\n    }\n\n    angleCurrent += angleDelta\n    while (angleCurrent >= Math.PI * 2) angleCurrent -= Math.PI * 2\n    if (finished) {\n      setFinished(true)\n      onFinished(currentSegment)\n      clearInterval(timerHandle)\n      timerHandle = 0\n      angleDelta = 0\n    }\n  }\n\n  const wheelDraw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const draw = () => {\n    clear()\n    drawWheel()\n    drawNeedle()\n  }\n\n  const drawSegment = (key, lastAngle, angle) => {\n    const ctx = canvasContext\n    const value = segments[key]\n    ctx.save()\n    ctx.beginPath()\n    ctx.moveTo(centerX, centerY)\n    ctx.arc(centerX, centerY, size, lastAngle, angle, false)\n    ctx.lineTo(centerX, centerY)\n    ctx.closePath()\n    ctx.fillStyle = segColors[key]\n    ctx.fill()\n    ctx.stroke()\n    ctx.save()\n    ctx.translate(centerX, centerY)\n    ctx.rotate((lastAngle + angle) / 2)\n    ctx.fillStyle = contrastColor\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillText(value.substr(0, 21), size / 2 + 20, 0)\n    ctx.restore()\n  }\n\n  const drawWheel = () => {\n    const ctx = canvasContext\n    let lastAngle = angleCurrent\n    const len = segments.length\n    const PI2 = Math.PI * 2\n    ctx.lineWidth = 1\n    ctx.strokeStyle = primaryColor\n    ctx.textBaseline = 'middle'\n    ctx.textAlign = 'center'\n    ctx.font = '1em ' + fontFamily\n    for (let i = 1; i <= len; i++) {\n      const angle = PI2 * (i / len) + angleCurrent\n      drawSegment(i - 1, lastAngle, angle)\n      lastAngle = angle\n    }\n\n    // Draw a center circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, 50, 0, PI2, false)\n    ctx.closePath()\n    ctx.fillStyle = primaryColor\n    ctx.lineWidth = 10\n    ctx.strokeStyle = contrastColor\n    ctx.fill()\n    ctx.font = 'bold 1em ' + fontFamily\n    ctx.fillStyle = contrastColor\n    ctx.textAlign = 'center'\n    ctx.fillText(buttonText, centerX, centerY + 3)\n    ctx.stroke()\n\n    // Draw outer circle\n    ctx.beginPath()\n    ctx.arc(centerX, centerY, size, 0, PI2, false)\n    ctx.closePath()\n\n    ctx.lineWidth = 10\n    ctx.strokeStyle = primaryColor\n    ctx.stroke()\n  }\n\n  const drawNeedle = () => {\n    const ctx = canvasContext\n    ctx.lineWidth = 1\n    ctx.strokeStyle = contrastColor\n    ctx.fileStyle = contrastColor\n    ctx.beginPath()\n    ctx.moveTo(centerX + 20, centerY - 50)\n    ctx.lineTo(centerX - 20, centerY - 50)\n    ctx.lineTo(centerX, centerY - 70)\n    ctx.closePath()\n    ctx.fill()\n    const change = angleCurrent + Math.PI / 2\n    let i =\n      segments.length -\n      Math.floor((change / (Math.PI * 2)) * segments.length) -\n      1\n    if (i < 0) i = i + segments.length\n    ctx.textAlign = 'center'\n    ctx.textBaseline = 'middle'\n    ctx.fillStyle = primaryColor\n    ctx.font = 'bold 1.5em ' + fontFamily\n    currentSegment = segments[i]\n    isStarted && ctx.fillText(currentSegment, centerX + 10, centerY + size + 50)\n  }\n  const clear = () => {\n    const ctx = canvasContext\n    ctx.clearRect(0, 0, 1000, 800)\n  }\n  return (\n    <div id='wheel'>\n      <canvas\n        id='canvas'\n        width='1000'\n        height='800'\n        style={{\n          pointerEvents: isFinished && isOnlyOnce ? 'none' : 'auto'\n        }}\n      />\n    </div>\n  )\n}\nexport default WheelComponent\n"],
  "mappings": "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",
  "names": ["WheelComponent", "segments", "segColors", "winningSegment", "onFinished", "primaryColor", "contrastColor", "buttonText", "isOnlyOnce", "size", "upDuration", "downDuration", "fontFamily", "currentSegment", "isStarted", "useState", "isFinished", "setFinished", "timerHandle", "timerDelay", "length", "angleCurrent", "angleDelta", "canvasContext", "maxSpeed", "Math", "PI", "upTime", "downTime", "spinStart", "frames", "centerX", "centerY", "useEffect", "wheelInit", "setTimeout", "window", "scrollTo", "initCanvas", "wheelDraw", "canvas", "document", "getElementById", "console", "log", "navigator", "userAgent", "indexOf", "createElement", "setAttribute", "appendChild", "addEventListener", "spin", "getContext", "Date", "getTime", "setInterval", "onTimerTick", "draw", "duration", "progress", "finished", "sin", "clearInterval", "clear", "drawWheel", "drawNeedle", "drawSegment", "key", "lastAngle", "angle", "ctx", "value", "save", "beginPath", "moveTo", "arc", "lineTo", "closePath", "fillStyle", "fill", "stroke", "translate", "rotate", "font", "fillText", "substr", "restore", "len", "PI2", "lineWidth", "strokeStyle", "textBaseline", "textAlign", "i", "fileStyle", "change", "floor", "clearRect", "React", "pointerEvents"]
}
